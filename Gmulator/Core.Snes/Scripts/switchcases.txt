switch (Disasm[op].Id)
{
	case ADC: break;
	case AND: break;
	case ASL: break;
	case BCC: break;
	case BCS: break;
	case BEQ: break;
	case BIT: break;
	case BMI: break;
	case BNE: break;
	case BPL: break;
	case BRA: break;
	case BRK: break;
	case BRL: break;
	case BVC: break;
	case BVS: break;
	case CLC: break;
	case CLD: break;
	case CLI: break;
	case CLV: break;
	case CMP: break;
	case COP: break;
	case CPX: break;
	case CPY: break;
	case DEC: break;
	case DEX: break;
	case DEY: break;
	case EOR: break;
	case INC: break;
	case INX: break;
	case INY: break;
	case JMP: break;
	case JML: break;
	case JSR: break;
	case JSL: break;
	case LDA: break;
	case LDX: break;
	case LDY: break;
	case LSR: break;
	case MVN: break;
	case MVP: break;
	case NOP: break;
	case ORA: break;
	case PEA: break;
	case PEI: break;
	case PER: break;
	case PHA: break;
	case PHB: break;
	case PHD: break;
	case PHK: break;
	case PHP: break;
	case PHX: break;
	case PHY: break;
	case PLA: break;
	case PLB: break;
	case PLD: break;
	case PLP: break;
	case PLX: break;
	case PLY: break;
	case REP: break;
	case ROL: break;
	case ROR: break;
	case RTI: break;
	case RTL: break;
	case RTS: break;
	case SBC: break;
	case SEC: break;
	case SED: break;
	case SEI: break;
	case SEP: break;
	case STA: break;
	case STP: break;
	case STX: break;
	case STY: break;
	case STZ: break;
	case TAX: break;
	case TAY: break;
	case TCD: break;
	case TCS: break;
	case TDC: break;
	case TRB: break;
	case TSB: break;
	case TSC: break;
	case TSX: break;
	case TXA: break;
	case TXS: break;
	case TXY: break;
	case TYA: break;
	case TYX: break;
	case WAI: break;
	case WDM: break;
	case XBA: break;
	case XCE: break;

switch (mode)
{
	case Absolute: return 0;
	case AbsoluteIndexedIndirect: return 0;
	case AbsoluteIndexedX: return 0;
	case AbsoluteIndexedY: return 0;
	case AbsoluteIndirect: return 0;
	case AbsoluteIndirectLong: return 0;
	case AbsoluteLong: return 0;
	case AbsoluteLongIndexedX: return 0;
	case Accumulator: return 0;
	case BlockMove: return 0;
	case DPIndexedIndirectX: return 0;
	case DPIndexedX: return 0;
	case DPIndexedY: return 0;
	case DPIndirect: return 0;
	case DPIndirectIndexedY: return 0;
	case DPIndirectLong: return 0;
	case DPIndirectLongIndexedY: return 0;
	case DirectPage: return 0;
	case Immediate: return 0;
	case ImmediateIndex: return 0;
	case ImmediateMemory: return 0;
	case Implied: return 0;
	case NoMode: return 0;
	case ProgramCounterRelative: return 0;
	case ProgramCounterRelativeLong: return 0;
	case SRIndirectIndexedY: return 0;
	case StackAbsolute: return 0;
	case StackDPIndirect: return 0;
	case StackInterrupt: return 0;
	case StackPCRelativeLong: return 0;
	case StackPull: return 0;
	case StackPush: return 0;
	case StackRTI: return 0;
	case StackRTL: return 0;
	case StackRTS: return 0;
	case StackRelative: return 0;
}

	private void ADC()
	{	

	}

	private void AND()
	{	

	}

	private void ASL()
	{	

	}

	private void BCC()
	{	

	}

	private void BCS()
	{	

	}

	private void BEQ()
	{	

	}

	private void BIT()
	{	

	}

	private void BMI()
	{	

	}

	private void BNE()
	{	

	}

	private void BPL()
	{	

	}

	private void BRA()
	{	

	}

	private void BRK()
	{	

	}

	private void BRL()
	{	

	}

	private void BVC()
	{	

	}

	private void BVS()
	{	

	}

	private void CLC()
	{	

	}

	private void CLD()
	{	

	}

	private void CLI()
	{	

	}

	private void CLV()
	{	

	}

	private void CMP()
	{	

	}

	private void COP()
	{	

	}

	private void CPX()
	{	

	}

	private void CPY()
	{	

	}

	private void DEC()
	{	

	}

	private void DEX()
	{	

	}

	private void DEY()
	{	

	}

	private void EOR()
	{	

	}

	private void INC()
	{	

	}

	private void INX()
	{	

	}

	private void INY()
	{	

	}

	private void JMP()
	{	

	}

	private void JML()
	{	

	}

	private void JSR()
	{	

	}

	private void JSL()
	{	

	}

	private void LDA()
	{	

	}

	private void LDX()
	{	

	}

	private void LDY()
	{	

	}

	private void LSR()
	{	

	}

	private void MVN()
	{	

	}

	private void MVP()
	{	

	}

	private void NOP()
	{	

	}

	private void ORA()
	{	

	}

	private void PEA()
	{	

	}

	private void PEI()
	{	

	}

	private void PER()
	{	

	}

	private void PHA()
	{	

	}

	private void PHB()
	{	

	}

	private void PHD()
	{	

	}

	private void PHK()
	{	

	}

	private void PHP()
	{	

	}

	private void PHX()
	{	

	}

	private void PHY()
	{	

	}

	private void PLA()
	{	

	}

	private void PLB()
	{	

	}

	private void PLD()
	{	

	}

	private void PLP()
	{	

	}

	private void PLX()
	{	

	}

	private void PLY()
	{	

	}

	private void REP()
	{	

	}

	private void ROL()
	{	

	}

	private void ROR()
	{	

	}

	private void RTI()
	{	

	}

	private void RTL()
	{	

	}

	private void RTS()
	{	

	}

	private void SBC()
	{	

	}

	private void SEC()
	{	

	}

	private void SED()
	{	

	}

	private void SEI()
	{	

	}

	private void SEP()
	{	

	}

	private void STA()
	{	

	}

	private void STP()
	{	

	}

	private void STX()
	{	

	}

	private void STY()
	{	

	}

	private void STZ()
	{	

	}

	private void TAX()
	{	

	}

	private void TAY()
	{	

	}

	private void TCD()
	{	

	}

	private void TCS()
	{	

	}

	private void TDC()
	{	

	}

	private void TRB()
	{	

	}

	private void TSB()
	{	

	}

	private void TSC()
	{	

	}

	private void TSX()
	{	

	}

	private void TXA()
	{	

	}

	private void TXS()
	{	

	}

	private void TXY()
	{	

	}

	private void TYA()
	{	

	}

	private void TYX()
	{	

	}

	private void WAI()
	{	

	}

	private void WDM()
	{	

	}

	private void XBA()
	{	

	}

	private void XCE()
	{	

	}

}